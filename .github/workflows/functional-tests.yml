name: Functional tests

on:
  workflow_dispatch:
    inputs:
      sha:
        description: GHAction GIT ref to test
        required: true
        type: string
      test-id:
        description: Test ID used to cancel previous run (PR ID or SHA usually)
        required: true
        type: string

env:
  TEST_REPO_PATH: test-repo
  ACTION_REPO: yoanm/gha-versioning
  COMMIT_STATUS_API_URL: "/repos/yoanm/gha-versioning/statuses/${{ inputs.sha }}"
  COMMIT_STATUS_TARGET_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  COMMIT_STATUS_CONTEXT: "gha-versioning/functional-tests"

concurrency:
  group: "${{ github.workflow }}-${{ inputs.test-id }}"
  cancel-in-progress: true

jobs:
  test:
    name: Test tags & releases
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TEST_REPO_PATH }}
    permissions:
      contents: write # Required to manage tags and release !
    steps:
      - name: Create original commit status
        if: ${{ always() }} # To keep -> Ensure status will be created even if workflow is cancelled at the beginning !
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_STATUS_MNGT }}
        working-directory: ${{ github.workspace }}
        run: |
          (
            gh api --method POST \
              -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $COMMIT_STATUS_API_URL \
              -f "state=pending" -f "target_url=${COMMIT_STATUS_TARGET_URL}" -f "context=${COMMIT_STATUS_CONTEXT}"
          ) || exit 1

      - name: Checkout test repo
        uses: actions/checkout@v4
        with:
          path: ${{ env.TEST_REPO_PATH }}

      - name: Checkout GHAction repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACTION_REPO }}
          ref: ${{ inputs.sha }}
          path: action-repo

      - name: Create original tag
        id: create-original-tag
        run: |
          MAJOR=$((1 + SRANDOM % 100))
          MINOR=$((1 + SRANDOM % 100))
          PATCH=$((1 + SRANDOM % 100))
          TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "Create tag $TAG"
          git config --global user.email "github-actions[bot]@users.noreply.github.com" # Required when -m is used !
          git config --global user.name "github-actions[bot]" # Required when -m is used !
          (git tag $TAG -m 'original tag message' && git push origin $TAG) || exit 1

          echo "full-tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "major-tag=v${MAJOR}" >> "$GITHUB_OUTPUT"
          echo "minor-tag=v${MAJOR}.${MINOR}" >> "$GITHUB_OUTPUT"

      - name: Run GHAction
        id: test-1
        uses: ./action-repo
        with:
          tag: ${{ steps.create-original-tag.outputs.full-tag }}
          working-directory: ${{ env.TEST_REPO_PATH }}

      - name: Ensure expected tag created
        env:
          MINOR_TAG: ${{ steps.test-1.outputs.minor-tag }}
          MAJOR_TAG: ${{ steps.test-1.outputs.major-tag }}
          ORIGINAL_TAG: ${{ steps.create-original-tag.outputs.full-tag }}
          EXPECTED_MINOR_TAG: ${{ steps.create-original-tag.outputs.minor-tag }}
          EXPECTED_MAJOR_TAG: ${{ steps.create-original-tag.outputs.major-tag }}
        run: |
          if ! [[ "$MINOR_TAG" = "$EXPECTED_MINOR_TAG" ]]; then
            echo "::error::Invalid minor tag format (expected $EXPECTED_MINOR_TAG, got $MINOR_TAG) !"
            exit 1
          fi;
          if ! [[ "$MAJOR_TAG" = "$EXPECTED_MAJOR_TAG" ]]; then
            echo "::error::Invalid major tag format (expected $EXPECTED_MAJOR_TAG, got $MAJOR_TAG) !"
            exit 1
          fi;

          if [[ "`git ls-remote --tags . "refs/tags/$EXPECTED_MINOR_TAG" | wc -l | tr -d '[:space:]'`" -eq 0 ]]; then
            echo "::error::Tag $EXPECTED_MINOR_TAG doesn't exist on remote repository !"
            exit 1
          fi;

          if [[ "`git ls-remote --tags . "refs/tags/$EXPECTED_MAJOR_TAG" | wc -l | tr -d '[:space:]'`" -eq 0 ]]; then
            echo "::error::Tag $EXPECTED_MAJOR_TAG doesn't exist on remote repository !"
            exit 1
          fi;

          # Ensure original tag message hasn't be updated
          if [[ "`git tag -l --format='%(contents)' $ORIGINAL_TAG | grep "original tag message" | wc -l | tr -d '[:space:]'`" -eq 0 ]]; then
            echo "::error::Tag $ORIGINAL_TAG doesn't contain the original message !"
            exit 1
          fi;

      - name: Run GHAction with an invalid tag format
        id: test-2
        uses: ./action-repo
        continue-on-error: true
        with:
          tag: v1.2.3-beta
          working-directory: ${{ env.TEST_REPO_PATH }}

      - name: Run GHAction with a non existing tag
        id: test-3
        uses: ./action-repo
        continue-on-error: true
        with:
          tag: v0.0.0
          working-directory: ${{ env.TEST_REPO_PATH }}

      - name: Ensure failure on previous runs
        env:
          RESULT_1: ${{ steps.test-2.outcome }}
          RESULT_2: ${{ steps.test-3.outcome }}
        run: |
          if ! [[ "$RESULT_1" = 'failure' ]]; then
            echo "::error::Running the action with an invalid tag format must produce a failure !"
            exit 1
          fi;
          if ! [[ "$RESULT_2" = 'failure' ]]; then
            echo "::error::Running the action with a non existing tag must produce a failure !"
            exit 1
          fi;

      - name: Create GH releases
        env:
          GITHUB_TOKEN: ${{ github.token }}
          MINOR_TAG: ${{ steps.test-1.outputs.minor-tag }}
          MAJOR_TAG: ${{ steps.test-1.outputs.major-tag }}
          ORIGINAL_TAG: ${{ steps.create-original-tag.outputs.full-tag }}
        run: |
          function create() {
            gh release create ${1} --title "${2}" --notes "${3}" --verify-tag --latest || return 1
            return 0
          }

          create "${MAJOR_TAG}" "${ORIGINAL_TAG}" "Note for ${MAJOR_TAG} (${ORIGINAL_TAG})" || exit 1
          create "${MINOR_TAG}" "${ORIGINAL_TAG}" "Note for ${MINOR_TAG} (${ORIGINAL_TAG})" || exit 1
          create "${ORIGINAL_TAG}" "${ORIGINAL_TAG}" "Note for ${ORIGINAL_TAG}" || exit 1

      - name: Run GHAction with releases
        uses: ./action-repo
        with:
          tag: ${{ steps.create-original-tag.outputs.full-tag }}
          update-inner-releases: true
          inner-releases-as-latest: false
          working-directory: ${{ env.TEST_REPO_PATH }}

      - name: Ensure expected releases updated
        env:
          GITHUB_TOKEN: ${{ github.token }}
          MINOR_TAG: ${{ steps.test-1.outputs.minor-tag }}
          MAJOR_TAG: ${{ steps.test-1.outputs.major-tag }}
          ORIGINAL_TAG: ${{ steps.create-original-tag.outputs.full-tag }}
        run: |
          function validate() {
            gh release view ${1} --json name,body > RELEASE_INFO
            NAME="`cat RELEASE_INFO | jq -r .name`"
            BODY="`cat RELEASE_INFO | jq -r .body`"
            if ! [[ "${NAME}" = "${2}" ]]; then
              echo "::error::Release name is invalid (expected \"${2}\", got \"${NAME}\")!"
              exit 1
            fi
            if ! [[ "${BODY}" = "${3}" ]]; then
              echo "::error::Release body is invalid (expected \"${3}\", got \"${BODY}\")!"
              exit 1
            fi
          }

          validate "${MINOR_TAG}" "${ORIGINAL_TAG}" "Note for ${MINOR_TAG} (${ORIGINAL_TAG})" || exit 1
          validate "${MAJOR_TAG}" "${ORIGINAL_TAG}" "Note for ${MAJOR_TAG} (${ORIGINAL_TAG})" || exit 1
          validate "${ORIGINAL_TAG}" "${ORIGINAL_TAG}" "Note for ${ORIGINAL_TAG}" || exit 1
          # Check on latest release
          LATEST_RELEASE_TAG="`gh repo view --json latestRelease -q .latestRelease.tagName || "_NONE_"`"
          if [[ "${LATEST_RELEASE_TAG}" = "${MAJOR_TAG}" ]]; then
            echo "::error::Latest release is not expected to be for tag ${MAJOR_TAG} !"
            exit 1
          fi

      - name: Remove minor release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          MINOR_TAG: ${{ steps.create-original-tag.outputs.minor-tag }}
        run: |
          gh release delete ${MINOR_TAG} --yes || exit 1

      - name: Run GHAction with releases, original release as latest and no minor release
        uses: ./action-repo
        with:
          tag: ${{ steps.create-original-tag.outputs.full-tag }}
          update-inner-releases: true
          working-directory: ${{ env.TEST_REPO_PATH }}

      - name: Validate major release is the latest
        env:
          GITHUB_TOKEN: ${{ github.token }}
          MAJOR_TAG: ${{ steps.test-1.outputs.major-tag }}
        run: |
          LATEST_RELEASE_TAG="`gh repo view --json latestRelease -q .latestRelease.tagName || "_NONE_"`"
          if ! [[ "${LATEST_RELEASE_TAG}" = "${MAJOR_TAG}" ]]; then
            echo "::error::Latest release is expected to be for tag ${MAJOR_TAG} (got ${LATEST_RELEASE_TAG})!"
            exit 1
          fi

      - name: Clean releases & tags
        if: ${{ always() }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          ORIGINAL_TAG: ${{ steps.create-original-tag.outputs.full-tag }}
          MINOR_TAG: ${{ steps.create-original-tag.outputs.minor-tag }}
          MAJOR_TAG: ${{ steps.create-original-tag.outputs.major-tag }}
        run: |
          gh release delete $ORIGINAL_TAG --yes || echo "::warning::Error while removing $ORIGINAL_TAG release !"
          gh release delete $MINOR_TAG --yes || echo "::warning::Error while removing $MINOR_TAG release !"
          gh release delete $MAJOR_TAG --yes || echo "::warning::Error while removing $MAJOR_TAG release !"

          git push --delete origin $ORIGINAL_TAG || echo "::warning::Error while removing $ORIGINAL_TAG tag !"
          git push --delete origin $MINOR_TAG || echo "::warning::Error while removing $MINOR_TAG tag !"
          git push --delete origin $MAJOR_TAG || echo "::warning::Error while removing $MAJOR_TAG tag !"

      - name: Update original commit status
        if: ${{ always() }}
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_STATUS_MNGT }}
          RESULT: ${{ job.status == 'cancelled' && 'failure' || job.status }}
        working-directory: ${{ github.workspace }}
        run: |
          (
            gh api --method POST \
              -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $COMMIT_STATUS_API_URL \
              -f "state=${RESULT}" -f "target_url=${COMMIT_STATUS_TARGET_URL}" -f "context=${COMMIT_STATUS_CONTEXT}"
          ) || exit 1
